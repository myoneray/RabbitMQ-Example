{"name":"Rabbitmq-example","tagline":"RabbitMQ　Java","body":"### RabbitMQ基础概念详细介绍\r\n@(RabbitMQ)[基础概念详细介绍]\r\n\r\n#### RabbitMQ简介\r\n\r\nAMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。**消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在**，反之亦然。\r\nAMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\r\nRabbitMQ是一个开源的AMQP实现，服务器端用**Erlang**语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。\r\n下面将重点介绍RabbitMQ中的一些基础概念，了解了这些概念，是使用好RabbitMQ的基础。\r\n\r\n-----\r\n#### ConnectionFactory、Connection、Channel\r\nConnectionFactory、Connection、Channel都是RabbitMQ对外提供的API中最基本的对象。\r\nConnection是RabbitMQ的socket链接，它封装了socket协议相关部分逻辑。\r\nConnectionFactory为Connection的制造工厂。\r\nChannel是我们与RabbitMQ打交道的最重要的一个接口，我们大部分的业务操作是在Channel这个接口中完成的，包括定义Queue、定义Exchange、绑定Queue与Exchange、发布消息等。\r\n\r\n### Queue\r\nQueue（队列）是RabbitMQ的内部对象，用于**存储消息**，用下图\r\n![Alt text](./queue.png)\r\n\r\n---\r\nRabbitMQ中的消息都只能存储在Queue中，\r\n生产者（下图中的**P**）生产消息并最终**投递**到Queue中，\r\n消费者（下图中的**C**）可以从Queue中**获取**消息并消费。\r\n![Alt text](./qq.png)\r\n\r\n---\r\n多个消费者可以订阅同一个Queue，这时Queue中的消息会被平均**分摊给多个消费者进行处理**，而不是每个消费者都收到所有的消息并处理。\r\n![Alt text](./2014-2-21-9-46-43.png)\r\n\r\n---\r\n### Message acknowledgment\r\n>acknowledgement\r\n[美] [əkˈnɑːlɪdʒmənt]\r\nn. 承认，确认; 致谢，鸣谢; 收条; [法]承认书;\r\n\r\n在实际应用中，可能会发生消费者收到Queue中的消息，但没有处理完成就宕机（或出现其他意外）的情况，这种情况下就可能会导致消息丢失。\r\n为了避免这种情况发生，我们可以要求**消费者在消费完消息后发送一个回执给RabbitMQ**，\r\n**RabbitMQ收到消息回执（Message acknowledgment）后才将该消息从Queue中移除**；\r\n如果RabbitMQ没有收到回执并检测到消费者的RabbitMQ连接断开，则RabbitMQ会将该消息发送给其他消费者（如果存在多个消费者）进行处理。\r\n这里不存在timeout概念，一个消费者处理消息时间再长也不会导致该消息被发送给其他消费者，除非它的RabbitMQ连接断开。\r\n这里会产生另外一个问题，如果我们的开发人员在处理完业务逻辑后，忘记发送回执给RabbitMQ，这将会导致严重的bug——Queue中堆积的消息会越来越多；\r\n消费者重启后会重复消费这些消息并重复执行业务逻辑…\r\n另外pub message是没有ack的。\r\n\r\n### Message durability\r\n>durability\r\n[英][ˌdjʊərə'bɪlətɪ][美][ˌdjʊrəˈbɪlətɪ]\r\nn.耐久性; 持久性;\r\n\r\n如果我们希望即使在RabbitMQ服务重启的情况下，也不会丢失消息，我们可以将**Queue与Message都设置为可持久化的（durable）**，这样可以保证绝大部分情况下我们的RabbitMQ消息不会丢失。但依然解决不了小概率丢失事件的发生（比如RabbitMQ服务器已经接收到生产者的消息，但还没来得及持久化该消息时RabbitMQ服务器就断电了），如果我们需要对这种小概率事件也要管理起来，那么我们要用到**事务**。由于这里仅为RabbitMQ的简单介绍，所以这里将不讲解RabbitMQ相关的事务。\r\n\r\n### Prefetch count\r\n>prefetch\r\n[英]['pri:'fetʃ][美]['pri:'fetʃ]\r\nv. 预取; \r\n\r\n前面我们讲到如果有多个消费者同时订阅同一个Queue中的消息，Queue中的消息会被平摊给多个消费者。这时如果每个消息的处理时间不同，就有可能会导致某些消费者一直在忙，而另外一些消费者很快就处理完手头工作并一直空闲的情况。我们可以通过设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息；消费者处理完这条消息后Queue会再给该消费者发送一条消息。\r\n![Alt text](./1111111.png)\r\n\r\n---\r\n### Exchange\r\n在上一节我们看到生产者将消息投递到Queue中，实际上这在RabbitMQ中这种事情永远都不会发生。\r\n**实际的情况是，生产者将消息发送到Exchange（交换器，下图中的X），**\r\n**由Exchange将消息路由到一个或多个Queue中（或者丢弃）。**\r\n![Alt text](./12222.png)\r\n\r\n---\r\nExchange是按照什么逻辑将消息路由到Queue的？这个将在Binding一节介绍。\r\nRabbitMQ中的Exchange有四种类型，不同的类型有着不同的路由策略，这将在Exchange Types一节介绍。\r\n\r\n### routing key\r\n生产者在将消息发送给Exchange的时候，一般会指定一个routing key，来指定这个消息的路由规则，\r\n而这个`routing key`需要与`Exchange Type`及`binding key`联合使用才能最终生效。\r\n在Exchange Type与binding key固定的情况下（在正常使用时一般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。\r\nRabbitMQ为routing key设定的长度限制为255 bytes。\r\n\r\n### Binding\r\n>binding\r\n[英][ˈbaɪndɪŋ][美][ˈbaɪndɪŋ]\r\nn.捆绑; （衣服等的）镶边; 粘合剂; 书籍的封面; \r\nadj.捆绑的; 粘合的; （书面材料）有约束力的; 应履行的; \r\nv.装订; 捆绑; 约束( bind的现在分词); （用长布条）缠绕; \r\n\r\nRabbitMQ中通过Binding将Exchange与Queue关联起来，这样RabbitMQ就知道如何正确地将消息路由到指定的Queue了。\r\n![Alt text](./133333.png)\r\n\r\n---\r\n\r\n### Binding key\r\n在绑定（Binding）Exchange与Queue的同时，一般会指定一个binding key；\r\n消费者将消息发送给Exchange时，一般会指定一个routing key；\r\n**当binding key与routing key相匹配时，消息将会被路由到对应的Queue中。**\r\n这个将在Exchange Types章节会列举实际的例子加以说明。\r\n**在绑定多个Queue到同一个Exchange的时候，这些Binding允许使用相同的binding key。**\r\nbinding key 并不是在所有情况下都生效，它依赖于Exchange Type，\r\n比如fanout类型的Exchange就会无视binding key，而是将消息路由到所有绑定到该Exchange的Queue。\r\n\r\n### Exchange Types\r\nRabbitMQ常用的Exchange Type有fanout、direct、topic、headers这四种\r\n（AMQP规范里还提到两种Exchange Type，分别为system与自定义，这里不予以描述），下面分别进行介绍。\r\n\r\n#### fanout\r\nfanout类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中。\r\n![Alt text](./1444.png)\r\n\r\n上图中，生产者（P）发送到Exchange（X）的所有消息都会路由到图中的两个Queue，并最终被两个消费者（C1与C2）消费。\r\n\r\n#### direct\r\ndirect类型的Exchange路由规则也很简单，它会把消息路由到那些**binding key与routing key完全匹配**的Queue中。\r\n![Alt text](./1555.png)\r\n\r\n以上图的配置为例，\r\n我们以routingKey=”error”发送消息到Exchange，则消息会路由到Queue1（amqp.gen-S9b…，这是由RabbitMQ自动生成的Queue名称）和Queue2（amqp.gen-Agl…）；\r\n如果我们以routingKey=”info”或routingKey=”warning”来发送消息，则消息只会路由到Queue2。\r\n如果我们以其他routingKey发送消息，则消息不会路由到这两个Queue中。\r\n\r\n#### topic\r\n前面讲到direct类型的Exchange路由规则是完全匹配binding key与routing key，但这种严格的匹配方式在很多情况下不能满足实际业务需求。topic类型的Exchange在匹配规则上进行了扩展，它与direct类型的Exchage相似，也是将消息路由到binding key与routing key相匹配的Queue中，但这里的匹配规则有些不同，它约定：\r\n\r\n>routing key为一个句点号“. ”分隔的字符串（我们将被句点号“. ”分隔开的每一段独立的字符串称为一个单词），如“stock.usd.nyse”、“nyse.vmw”、“quick.orange.rabbit”\r\n>binding key与routing key一样也是句点号“. ”分隔的字符串\r\n>binding key中可以存在两种特殊字符“*”与“#”，用于做模糊匹配，其中“*”用于匹配一个单词，“#”用于匹配多个单词（可以是零个）\r\n![Alt text](./1666.png)\r\n\r\n以上图中的配置为例，\r\nroutingKey=”quick.orange.rabbit”的消息会同时路由到Q1与Q2，\r\nroutingKey=”lazy.orange.fox”的消息会路由到Q1，\r\nroutingKey=”lazy.brown.fox”的消息会路由到Q2，\r\nroutingKey=”lazy.pink.rabbit”的消息会路由到Q2（只会投递给Q2一次，虽然这个routingKey与Q2的两个bindingKey都匹配）；routingKey=”quick.brown.fox”、routingKey=”orange”、routingKey=”quick.orange.male.rabbit”的消息将会被丢弃，\r\n因为它们没有匹配任何bindingKey。\r\n\r\n#### headers\r\nheaders类型的Exchange不依赖于routing key与binding key的匹配规则来路由消息，\r\n而是**根据发送的消息内容中的headers属性进行匹配。**\r\n在绑定Queue与Exchange时指定一组键值对；当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对；如果完全匹配则消息会路由到该Queue，否则不会路由到该Queue。\r\n该类型的Exchange没有用到过（不过也应该很有用武之地），所以不做介绍。\r\n\r\n### RPC\r\nMQ本身是基于异步的消息处理，前面的示例中所有的生产者（P）将消息发送到RabbitMQ后不会知道消费者（C）处理成功或者失败（甚至连有没有消费者来处理这条消息都不知道）。\r\n但实际的应用场景中，我们很可能需要一些同步处理，需要同步等待服务端将我的消息处理完成后再进行下一步处理。这相当于RPC（Remote Procedure Call，远程过程调用）。在RabbitMQ中也支持RPC。\r\n\r\n![Alt text](./177.png)\r\nRabbitMQ中实现RPC的机制是：\r\n客户端发送请求（消息）时，在消息的属性（MessageProperties，在AMQP协议中定义了14中properties，这些属性会随着消息一起发送）中设置两个值replyTo（一个Queue名称，用于告诉服务器处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，服务器处理完成后需要将此属性返还，客户端将根据这个id了解哪条请求被成功执行了或执行失败）\r\n服务器端收到消息并处理\r\n服务器端处理完消息后，将生成一条应答消息到replyTo指定的Queue，同时带上correlationId属性\r\n客户端之前已订阅replyTo指定的Queue，从中收到服务器的应答消息后，根据其中的correlationId属性分析哪条请求被执行了，根据执行结果进行后续业务处理\r\n\r\n\r\n---------------\r\n总结\r\n本文介绍了RabbitMQ中个人认为最重要的概念，充分利用RabbitMQ提供的这些功能就可以处理我们绝大部分的异步业务了。\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}